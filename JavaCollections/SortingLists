import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

class Person {
	private int id;
	private String name;

	public Person(int id, String name) {

		this.id = id;
		this.name = name;

	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String toString() {
		return name;
	}

}

class StringLengthComparator implements Comparator<String> {

	@Override
	public int compare(String s1, String s2) {
		int len1 = s1.length();
		int len2 = s2.length();

		if (len1 > len2) { return 1; }
		if (len1 < len2) { return -1; }
		return 0;
	}

}

class AlphabeticalComparator implements Comparator<String> {

	public int compare(String s1, String s2) {

		return s1.compareTo(s2);
	}

}

class ReverseAlphabeticalComparator implements Comparator<String> {

	public int compare(String s1, String s2) {

		return -s1.compareTo(s2);
	}
}

public class Sorting {

	public static void main(String[] args) {
		List<String> animal = new ArrayList<String>();

		animal.add("Donkey");
		animal.add("Elephant");
		animal.add("Whale");
		animal.add("Sloth");
		animal.add("Okapi");
		animal.add("Cheetah");

		// Collections.sort(animal, new StringLengthComparator()); // add the
		// comparator class to sort length of animal string
		Collections.sort(animal, new ReverseAlphabeticalComparator());

		for (String Animal : animal) {

			System.out.println(Animal);

		}

		List<Integer> num = new ArrayList<Integer>();

		num.add(434);
		num.add(112);
		num.add(32);
		num.add(3424);
		num.add(98);

		Collections.sort(num, new Comparator<Integer>() {// reverse number

					@Override
					public int compare(Integer i1, Integer i2) {
						return -i1.compareTo(i2); // easier to use compare to
													// method
					}

				});

		for (int num1 : num) {
			System.out.println(num1);
		}

		// /////////////////////////////////sorting arbitrary
		// objects/////////////////////////////////////

		List<Person> people = new ArrayList<Person>();

		people.add(new Person(4, "Zork"));
		people.add(new Person(3, "Tarquin"));
		people.add(new Person(0, "Colin"));
		people.add(new Person(2, "Quentin"));
		people.add(new Person(1, "Neil"));

		/*
		 * //Collections.sort(people); this wont work as the person object has
		 * no natural order Collections.sort(people, new Comparator<Person>(){
		 * // implementing the comparator method
		 * 
		 * @Override public int compare(Person p1, Person p2) {// sorting in
		 * order of Id if(p1.getId() > p2.getId()){ return 1; } else
		 * if(p1.getId()< p2.getId()){ return -1; }
		 * 
		 * return 0; }
		 * 
		 * });
		 */

		Collections.sort(people, new Comparator<Person>() { // implementing the
															// comparator method

					@Override
					public int compare(Person p1, Person p2) {// sorting in
																// order of name
						return p1.getName().compareTo(p2.getName());

					}

				});

		for (Person person : people) {
			System.out.println(person);
		}

	}

}
