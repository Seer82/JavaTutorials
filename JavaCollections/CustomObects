import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;

class Person {

	private int id;
	private String name;

	public Person(int id, String name) {

		this.name = name;
		this.id = id;

	}

	public String toString() {
		return " ID is:" + id + ": " + name;

	}

	@Override
	public int hashCode() { // if using a custom object in a map or set you need
							// to implement the hashcode and equals methods to
							// avoid duplicate objects
		final int prime = 31;
		int result = 1;
		result = prime * result + id;
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		Person other = (Person) obj;
		if (id != other.id) return false;
		if (name == null) {
			if (other.name != null) return false;
		} else if (!name.equals(other.name)) return false;
		return true;
	}

}

public class CustomSet {

	public static void main(String[] args) {

		Person p1 = new Person(0, "dave");
		Person p2 = new Person(1, "colin");
		Person p3 = new Person(2, "neil");
		Person p4 = new Person(0, "dave");

		Map<String, Integer> map = new LinkedHashMap<String, Integer>();

		map.put("zero", 0);
		map.put("one", 1);
		map.put("one", 2); // each key is unique so duplicates are ignored
		map.put("three", 3);

		for (String key : map.keySet()) {

			System.out.println(key + ": " + map.get(key));

		}

		Set<String> set = new LinkedHashSet<String>();

		set.add("dog");
		set.add("dog"); // like hashmap duplicates are ignored
		set.add("monkey");
		set.add("goat");

		Set<Person> set1 = new LinkedHashSet<Person>();

		set1.add(p1);
		set1.add(p2); //
		set1.add(p3);
		set1.add(p4);

		System.out.println(set1);

		Map<Person, Integer> map1 = new LinkedHashMap<Person, Integer>();
		map1.put(p1, 0);
		map1.put(p2, 1);
		map1.put(p3, 2);
		map1.put(p4, 3);

		for (Person key : map1.keySet()) {

			System.out.println(key + ": " + map1.get(key));

		}

	}

}
